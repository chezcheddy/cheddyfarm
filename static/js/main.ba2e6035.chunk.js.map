{"version":3,"sources":["App.js","index.js"],"names":["NearConfig","networkId","nodeUrl","bananaContractName","contractName","walletUrl","Avocado","role","aria-label","className","Banana","Cucumber","Near","Berry","App","props","state","connected","signedIn","accountId","account","claiming","bananaNum","_balanceRefreshTimer","_initNear","then","setState","_accountId","account_id","accountIndex","account_index","avocadoBalance","parseFloat","avocado_balance","this","_pixelCost","bananaBalance","banana_balance","bananaBalanceBN","BN","numPixels","num_pixels","farmingPreference","farming_preference","startTime","Date","getTime","avocadoPixels","bananaPixels","avocadoRewardPerMs","bananaRewardPerMs","bananaRewardPerMsBN","div","stats","_bananaContract","get_account","parseBananaAccount","_contract","cucumberAccount","Object","assign","nearBalanceBn","near_balance","cucumberBalanceBn","cucumber_balance","nearClaimed","near_claimed","Math","pow","nearBalance","toString","cucumberBalance","percent","totalSupply","forced","document","hidden","currentTime","get_next_reward_timestamp","nextReward","get_last_reward_timestamp","lastReward","get_expected_reward","expectedReward","get_stats","rawStats","totalSupplyBn","total_cucumber_balance","totalNearClaimed","total_near_claimed","totalNearRewarded","total_near_received","timeToNextRewards","timeFromLastRewards","refreshStats","getAccount","clearInterval","setInterval","t","keyStore","nearAPI","BrowserLocalStorageKeyStore","deps","near","_keyStore","_near","_walletConnection","getAccountId","_account","viewMethods","changeMethods","get_pixel_cost","_pixelCostBN","refresh","requestSignIn","signOut","bananas","refreshAccountStats","trunc","mul","transfer_with_vault","receiver_id","amount","payload","claim_near","content","onClick","logOut","toFixed","min","max","value","onChange","enableMobileNumericKeyboard","disabled","stakeBananas","b","claimNear","style","marginBottom","aria-hidden","statsContent","key","initialTime","direction","timeToUpdate","lastUnit","checkpoints","time","callback","Fragment","Hours","Minutes","formatValue","v","padStart","Seconds","Milliseconds","href","React","Component","Swap","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.ba2e6035.chunk.js","sourcesContent":["import \"./App.scss\";\nimport React from 'react';\nimport BN from 'bn.js';\nimport * as nearAPI from 'near-api-js'\nimport InputNumber from 'react-input-number';\nimport Timer from 'react-compound-timer';\n\nconst IsMainnet = true;\nconst TestNearConfig = {\n  networkId: 'testnet',\n  nodeUrl: 'https://rpc.testnet.near.org',\n  bananaContractName: 'dev-1604708520705-2360364',\n  contractName: 'dev-1605908677227-6741841',\n  walletUrl: 'https://wallet.testnet.near.org',\n};\nconst MainNearConfig = {\n  networkId: 'mainnet',\n  nodeUrl: 'https://rpc.mainnet.near.org',\n  bananaContractName: 'berryclub.ek.near',\n  contractName: 'farm.berryclub.ek.near',\n  walletUrl: 'https://wallet.near.org',\n};\nconst NearConfig = IsMainnet ? MainNearConfig : TestNearConfig;\n\nconst Avocado = <span role=\"img\" aria-label=\"avocado\" className=\"berry\">🥑</span>;\nconst Banana = <span role=\"img\" aria-label=\"banana\" className=\"berry\">🍌</span>;\nconst Cucumber = <span role=\"img\" aria-label=\"cucumber\" className=\"berry\">🥒</span>;\nconst Near = <span role=\"img\" aria-label=\"near\" className=\"berry\">Ⓝ</span>;\n\nconst Berry = {\n  Avocado: 'Avocado',\n  Banana: 'Banana',\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      connected: false,\n      signedIn: false,\n      accountId: null,\n      account: null,\n      claiming: false,\n      bananaNum: 1,\n    };\n    this._balanceRefreshTimer = null;\n\n    this._initNear().then(() => {\n      this.setState({\n        connected: true,\n        signedIn: !!this._accountId,\n        accountId: this._accountId,\n      });\n    });\n  }\n\n  componentDidMount() {\n\n  }\n\n  parseBananaAccount(account, accountId) {\n    if (!account) {\n      account = {\n        accountId,\n        accountIndex: -1,\n        avocadoBalance: 25.0,\n        bananaBalance: 0.0,\n        bananaBalanceBN: new BN(0),\n        numPixels: 0,\n        farmingPreference: Berry.Avocado,\n      }\n    } else {\n      account = {\n        accountId: account.account_id,\n        accountIndex: account.account_index,\n        avocadoBalance: parseFloat(account.avocado_balance) / this._pixelCost,\n        bananaBalance: parseFloat(account.banana_balance) / this._pixelCost,\n        bananaBalanceBN: new BN(account.banana_balance),\n        numPixels: account.num_pixels,\n        farmingPreference: account.farming_preference,\n      }\n    }\n    account.startTime = new Date().getTime();\n    account.avocadoPixels = (account.farmingPreference === Berry.Avocado) ? (account.numPixels + 1) : 0;\n    account.bananaPixels = (account.farmingPreference === Berry.Banana) ? (account.numPixels) : 0;\n    account.avocadoRewardPerMs = account.avocadoPixels / (24 * 60 * 60 * 1000);\n    account.bananaRewardPerMs = account.bananaPixels / (24 * 60 * 60 * 1000);\n    account.bananaRewardPerMsBN = account.bananaBalanceBN.div(new BN(24 * 60 * 60 * 1000));\n    return account;\n  }\n\n  async getAccount(accountId, stats) {\n    const account = this.parseBananaAccount(\n      await this._bananaContract.get_account({account_id: accountId}),\n      accountId\n    );\n    let cucumberAccount = await this._contract.get_account({account_id: accountId});\n    if (!cucumberAccount) {\n      Object.assign(account, {\n        nearBalanceBn: new BN(0),\n        cucumberBalanceBn: new BN(0),\n        nearClaimed: 0,\n      });\n    } else {\n      Object.assign(account, {\n        nearBalanceBn: new BN(cucumberAccount.near_balance),\n        cucumberBalanceBn: new BN(cucumberAccount.cucumber_balance),\n        nearClaimed: parseFloat(cucumberAccount.near_claimed) / Math.pow(10, 24),\n      });\n    }\n    account.nearBalance = parseFloat(account.nearBalanceBn.toString()) / Math.pow(10, 24);\n    account.cucumberBalance = parseFloat(account.cucumberBalanceBn.toString()) / this._pixelCost;\n    account.percent = account.cucumberBalance * 100 / stats.totalSupply;\n    return account;\n  }\n\n  async refreshStats(forced) {\n    if (!forced && document.hidden) {\n      return;\n    }\n\n    let currentTime = new Date().getTime();\n    const nextReward = parseFloat(await this._bananaContract.get_next_reward_timestamp()) / 1e6;\n    const lastReward = parseFloat(await this._bananaContract.get_last_reward_timestamp()) / 1e6;\n    const expectedReward = parseFloat(await this._bananaContract.get_expected_reward()) / 1e24;\n    const rawStats = await this._contract.get_stats();\n    const stats = {\n      totalSupplyBn: new BN(rawStats.total_cucumber_balance),\n      totalSupply: parseFloat(rawStats.total_cucumber_balance) / this._pixelCost,\n      totalNearClaimed: parseFloat(rawStats.total_near_claimed) / Math.pow(10, 24),\n      totalNearRewarded: parseFloat(rawStats.total_near_received) / Math.pow(10, 24),\n      timeToNextRewards: nextReward - currentTime,\n      timeFromLastRewards: currentTime - lastReward,\n      expectedReward,\n    };\n    this.setState({\n      stats,\n    })\n  }\n\n  async refreshAccountStats() {\n    await this.refreshStats(true);\n    let account = await this.getAccount(this._accountId, this.state.stats);\n\n    if (this._balanceRefreshTimer) {\n      clearInterval(this._balanceRefreshTimer);\n      this._balanceRefreshTimer = null;\n    }\n\n    this.setState({\n      account,\n    });\n\n    this._balanceRefreshTimer = setInterval(() => {\n      const t = new Date().getTime() - account.startTime;\n      this.setState({\n        account: Object.assign({}, account, {\n          avocadoBalance: account.avocadoBalance + t * account.avocadoRewardPerMs,\n          bananaBalance: account.bananaBalance + t * account.bananaRewardPerMs,\n        }),\n      });\n    }, 100);\n  }\n\n  async _initNear() {\n    const keyStore = new nearAPI.keyStores.BrowserLocalStorageKeyStore();\n    const near = await nearAPI.connect(Object.assign({ deps: { keyStore } }, NearConfig));\n    this._keyStore = keyStore;\n    this._near = near;\n\n    this._walletConnection = new nearAPI.WalletConnection(near, NearConfig.contractName);\n    this._accountId = this._walletConnection.getAccountId();\n\n    this._account = this._walletConnection.account();\n    this._bananaContract = new nearAPI.Contract(this._account, NearConfig.bananaContractName, {\n      viewMethods: ['get_account', 'get_expected_reward', 'get_next_reward_timestamp', 'get_last_reward_timestamp', 'get_account_by_index', 'get_lines', 'get_line_versions', 'get_pixel_cost', 'get_account_balance', 'get_account_num_pixels', 'get_account_id_by_index'],\n      changeMethods: ['transfer_with_vault',],\n    });\n    this._contract = new nearAPI.Contract(this._account, NearConfig.contractName, {\n      viewMethods: ['account_exists', 'get_account', 'get_stats', 'get_near_balance', 'get_total_near_claimed', 'get_total_near_received', 'get_balance', 'get_total_supply'],\n      changeMethods: ['claim_near', 'transfer_raw'],\n    });\n    this._pixelCostBN = new BN(await this._bananaContract.get_pixel_cost());\n    this._pixelCost = parseFloat(this._pixelCostBN.toString());\n    await this.refresh();\n  }\n\n  async requestSignIn() {\n    const appTitle = 'Berry Farm';\n    await this._walletConnection.requestSignIn(\n        NearConfig.contractName,\n        appTitle\n    )\n  }\n\n  async logOut() {\n    this._walletConnection.signOut();\n    this._accountId = null;\n    this.setState({\n      signedIn: !!this._accountId,\n      accountId: this._accountId,\n    })\n  }\n\n  async stakeBananas(bananas) {\n    await this.refreshAccountStats();\n    if (bananas) {\n      bananas = new BN(Math.trunc(bananas * 100000)).mul(this._pixelCostBN).div(new BN(100000));\n    } else {\n      bananas = this.state.account.bananaBalanceBN;\n    }\n    await this._bananaContract.transfer_with_vault({\n      receiver_id: NearConfig.contractName,\n      amount: bananas.toString(),\n      payload: '\"DepositAndStake\"',\n    }, new BN(\"50000000000000\"), new BN(\"1\"))\n  }\n\n  async claimNear() {\n    this.setState({\n      claiming: true\n    });\n    await this._contract.claim_near();\n    await this.refreshAccountStats();\n    this.setState({\n      claiming: false\n    });\n  }\n\n  async refresh() {\n    if (this._accountId) {\n      await this.refreshAccountStats();\n    } else {\n      await this.refreshStats(true);\n    }\n  }\n\n  render() {\n    const account = this.state.account;\n    const fraction = 3;\n    const content = !this.state.connected ? (\n        <div>Connecting... <span className=\"spinner-grow spinner-grow-sm\" role=\"status\" aria-hidden=\"true\"></span></div>\n    ) : (this.state.signedIn ? (\n        <div>\n          <div className=\"float-right\">\n            <button\n              className=\"btn btn-outline-secondary\"\n              onClick={() => this.logOut()}>Log out ({this.state.accountId})</button>\n          </div>\n          <div>\n            { account ? (\n              <div className=\"lines\">\n                <div>\n                  <h3>Your Balances</h3>\n                  <button\n                    className=\"btn\"\n                    onClick={() => this.refreshAccountStats()}\n                  >\n                    Refresh\n                  </button>\n                </div>\n                <div className=\"balances\">\n                  {Avocado}{' '}{account.avocadoBalance.toFixed(fraction)}\n                  {(account.avocadoPixels > 0) ? (\n                    <span>\n                      {' (+'}{account.avocadoPixels}{Avocado}{'/day)'}\n                    </span>\n                  ) : \"\"}\n                </div>\n                <div className=\"balances\">\n                  {Banana}{' '}{account.bananaBalance.toFixed(fraction)}\n                  {(account.bananaPixels > 0) ? (\n                    <span>\n                      {' (+'}{account.bananaPixels}{Banana}{'/day)'}\n                    </span>\n                  ) : \"\"}\n                </div>\n                <div>\n                  <div>\n                    <span className=\"balances label-for-swap\">{Banana}</span>\n                    <InputNumber\n                      className=\"balances swap-input\"\n                      min={0.001}\n                      max={this.state.account.bananaBalance}\n                      value={this.state.bananaNum}\n                      onChange={(bananaNum) => this.setState({bananaNum})}\n                      enableMobileNumericKeyboard\n                    />\n                    <button\n                      className={\"btn-max balances\"}\n                      disabled={account.bananaBalance === 0}\n                      onClick={() => this.setState({bananaNum: account.bananaBalance.toFixed(3)})}\n                    >\n                      MAX\n                    </button>\n\n                  <Swap\n                    account={this.state.account}\n                    stakeBananas={(b) => this.stakeBananas(b)}\n                    amount={this.state.bananaNum}\n                  />\n                  </div>\n                </div>\n                <div className=\"balances\">\n                  {Cucumber}{' '}{account.cucumberBalance.toFixed(fraction)}{' ('}{account.percent.toFixed(fraction)}{'% share)'}\n                </div>\n                <div>\n                  <button\n                    className={\"btn btn-success\" + ((account.nearBalance > 0) ? \" btn-large\" : \" hidden\")}\n                    disabled={this.state.claiming}\n                    onClick={() => this.claimNear()}\n                  >\n                    Claim {account.nearBalance.toFixed(fraction)} {Near}\n                  </button>\n                </div>\n              </div>\n            ) : \"\"}\n            </div>\n        </div>\n    ) : (\n        <div style={{marginBottom: \"10px\"}}>\n          <button\n              className=\"btn btn-primary\"\n              onClick={() => this.requestSignIn()}>Log in with NEAR Wallet</button>\n        </div>\n    ));\n    const stats = this.state.stats;\n    const statsContent = stats ? (\n        <div>\n          <div>\n            <h3>Rewards</h3>\n            <button\n              className=\"btn\"\n              onClick={() => this.refresh()}\n            >\n              Refresh\n            </button>\n          </div>\n          <div className=\"lines\">\n            <div>\n              Berry Club distributes rewards at most once per minute\n            </div>\n            <div>\n              <span className=\"label\">Next reward {Near}</span>\n              <span className=\"balances\">{stats.expectedReward.toFixed(6)}</span>\n            </div>\n            {account ? (\n              <div>\n                <div>\n                  <span className=\"label\">You'll get {Near}</span>\n                  <span className=\"balances\">{(stats.expectedReward * account.percent / 100).toFixed(6)}</span>\n                </div>\n                <div>\n                  <span className=\"label\">Total earned {Near}</span>\n                  <span className=\"balances\">\n                    {(account.nearClaimed + account.nearBalance).toFixed(6)}\n                  </span>\n                </div>\n              </div>\n              ): \"\"}\n            <div>\n              <span className=\"label\">{(stats.timeToNextRewards > 0) ? \"Time until next reward\" : \"Time from last reward\"}</span>\n              <span className={\"balances\" + ((stats.timeToNextRewards < 0) ? \" red\" : \"\")}>\n                <Timer\n                  key={stats.timeToNextRewards}\n                  initialTime={(stats.timeToNextRewards > 0) ? stats.timeToNextRewards : stats.timeFromLastRewards}\n                  direction={(stats.timeToNextRewards > 0) ? \"backward\" : \"forward\"}\n                  timeToUpdate={100}\n                  lastUnit=\"h\"\n                  checkpoints={[\n                    {\n                      time: 0,\n                      callback: () => this.refreshStats(),\n                    },\n                  ]}\n                >\n                  {() => (\n                    <React.Fragment>\n                      <Timer.Hours />:\n                      <Timer.Minutes formatValue={v => `${v}`.padStart(2, '0')}/>:\n                      <Timer.Seconds formatValue={v => `${v}`.padStart(2, '0')} />.\n                      <Timer.Milliseconds formatValue={v => `${v}`.padStart(3, '0')} />\n                    </React.Fragment>\n                  )}\n                </Timer>\n              </span>\n            </div>\n            {(stats.timeToNextRewards < 0) ? (\n              <div className=\"larger font-weight-bold\">\n                Use {Avocado} to draw a pixel on berry club to distribute {Near} rewards.\n              </div>\n            ) : \"\"}\n          </div>\n          <div>\n            <h3>Global stats</h3>\n            <button\n              className=\"btn\"\n              onClick={() => this.refresh()}\n            >\n              Refresh\n            </button>\n          </div>\n          <div className=\"lines\">\n            <div>\n              <span className=\"label\">Total {Cucumber} Supplied</span>\n              <span className=\"balances\">{stats.totalSupply.toFixed(3)}</span>\n            </div>\n            <div>\n              <span className=\"label\">Total {Near} Rewarded</span>\n              <span className=\"balances\">{stats.totalNearRewarded.toFixed(6)}</span>\n            </div>\n            <div>\n              <span className=\"label\">Total {Near} Claimed</span>\n              <span className=\"balances\">{stats.totalNearClaimed.toFixed(6)}</span>\n            </div>\n\n          </div>\n        </div>\n      ) : \"\";\n    return (\n        <div className=\"container\">\n          <div className=\"row\">\n            <div>\n              <div>\n              <h2>Berry Farm {Cucumber}</h2>\n              <a\n                className=\"btn btn-outline-none\"\n                href=\"https://berryclub.io\">{Avocado} Berry Club {Banana}\n              </a>\n              </div>\n              <div className=\"call-to-action\">\n                Swap {Banana} to stake {Cucumber} to farm {Near}\n              </div>\n              {content}\n              {statsContent}\n              <div>\n              </div>\n            </div>\n          </div>\n        </div>\n    );\n  }\n}\n\nconst Swap = (props) => {\n  return (\n    <button\n      className={\"btn btn-large\" + (props.amount === 0 ? \" btn-success\" : \"\")}\n      disabled={props.account.bananaBalance < props.amount}\n      onClick={() => props.stakeBananas(props.amount)}\n    >\n      Swap <span className=\"font-weight-bold\">{props.amount || \"\"}{props.amount ? \"\" : \"ALL\"}{Banana}</span> to <span className=\"font-weight-bold\">{Cucumber}</span>\n    </button>\n  );\n}\n\n/*\nconst Account = (props) => {\n  const accountId = props.accountId;\n  const shortAccountId = (accountId.length > 6 + 6 + 3) ?\n    (accountId.slice(0, 6) + '...' + accountId.slice(-6)) :\n    accountId;\n  return <a className=\"account\"\n            href={`https://wayback.berryclub.io/${accountId}`}>{shortAccountId}</a>\n}\n*/\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}